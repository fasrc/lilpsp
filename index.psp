<%
"""
index.psp -- an example webpage

DESCRIPTION
	This is the template for building webpages.  Any code between pairs of 
	comments like this:

		#--- BEGIN TEMPLATE CODE...
		#--- ...END TEMPLATE CODE
	
	should not need to be modified.

REQUIREMENTS
	n/a

AUTHOR
	John Brunelle <john_brunelle@harvard.edu>
	Harvard FAS Research Computing
"""


#--- BEGIN TEMPLATE CODE...

class BreakOut(Exception): pass

try:
	try:
		from lilpsp import config, core, org
		import time

		req.add_common_vars()
		
		msg = "request from ip [%s] from user [%s]" % (req.subprocess_env['REMOTE_ADDR'], core.getUsername(session, req))
		core.log(msg, session, req)
		
		core.sessionCheck(session, req)
		
		base_url_path = req.subprocess_env['REQUEST_URI'].split('?',1)[0]  #e.g. /PATH/FILENAME.psp, of 'https://SERVER/PATH/FILENAME.psp?FOO=BAR'
		base_url_dir = os.path.dirname(base_url_path)  #e.g. /PATH, of 'https://SERVER/PATH/FILENAME.psp?FOO=BAR'
		base_fs_dir  = os.path.dirname(req.subprocess_env['SCRIPT_FILENAME'])

		#--- ...END TEMPLATE CODE



		#pre-content code goes here (while you can still redirect)
		#see login.psp for a test of posting to self
		#in other cases, after form processing, you likely want also want to redirect to self so client refresh does not resubmit:
		#	util.redirect(req, base_url_path)



		#--- BEGIN TEMPLATE CODE...
		
		req.write(open(os.path.join(base_fs_dir, 'header.html')).read())
		wrote_header = True

		if config.AUTH_TYPE=='FORM': req.write(org.html_logout_link(session, req))

		#--- ...END TEMPLATE CODE



		#main content goes here
		#use form.has_key('VARIABLE') and string(form['VARIABLE']) to access form and query string data
		req.write("Hello, world!")


		#--- examples of how to handle Exceptions

		#If you don't want to log anything specific about it (e.g. the 
		#exception message and traceback are enough, or explicitly raising 
		#something as a sanity check), just let it happen.  The catch-all 
		#handler below will do all the work.

		#Otherwise:
		try:
			#...code for which you want to handle Exceptions...
			pass
		except Exception, e:
			#--- pick one of the following styles:

			#choice 1 -- you have something meaningful to explain to the user (log it, explain it, and wrap-up)
			msg = "...something about the situation for the log..."
			core.log(msg, session, req, e)
%>
			<p>
			...summary for user, possibly using <%= org.err_str %>...
			</p>
			<p>
			...details for user...
			</p>
<%
			raise BreakOut()

			#choice 2 -- just want to log some comments, then let the generic catch-all kick in
			msg = "...something about the situation for the log..."
			core.log(msg, session, req)  #catch-all below will log e's details; if e is enough
			raise



	#--- BEGIN TEMPLATE CODE...
		
	except BreakOut:
		pass
	
	req.write(open(os.path.join(base_fs_dir, 'footer.html')).read())
	wrote_footer = True
except apache.SERVER_RETURN:
	##if it's re-raised, sessions start over; passing seems wrong but it's the only way I know of to make sessions persist across redirect
	#raise
	pass
except Exception, e:
	if not ( 'core' in globals() and 'org' in globals() ):
		raise  #just bailout and let the server handle it (if configured with PythonDebug On, the traceback will be shown to the user)
	else:
		msg = "ERROR: exception when handling user [%s]: %s" % (core.getUsername(session, req), e)
		core.log(msg, session, req, e)
		if not 'wrote_header' in globals() and 'base_fs_dir' in globals(): req.write(open(os.path.join(base_fs_dir, 'header.html')).read())
		req.write(org.errmsg_general(session, req))
		if not 'wrote_footer' in globals() and 'base_fs_dir' in globals(): req.write(open(os.path.join(base_fs_dir, 'footer.html')).read())

#--- ...END TEMPLATE CODE
%>
